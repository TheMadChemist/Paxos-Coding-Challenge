Challenge #1

A. The application might bottleneck with too many users trying to access it at once. In this case we could provide extra
machines all hidden behind a load balancer to properly field the incoming requests.

B. Each time the container is built it has to install all of the python packages which dont really change. We could create
a second container, which would simply contain the dependencies and other rarely changing pieces, and then use this container
as the base for the microservices container which would prevent that duplicated work. Though as is, docker does cache steps
and if nothing is changed at that level or below it wont need to run it again. The base container also means that we would be
able to have multiple containers based off of it, giving us less code duplication.

Challenge #2

The time complexity falls in line with the sorting algorithm in this case. Pythons sort uses Timsort, which has a worst
case of nlog(n). So the time complexity of the algorithm is nlog(n) as well.

A. Run the program with the --findTrio flag set. This solution is not sustainable for more items however. Say 4 items are
required, a dynamic programming solution will be more performant. 

B. If the file cannot be loaded into memory, you would hold the best solution in the same way. Then you would have 2
nested loops, one which opens the file, navigates to the next value that has yet to be used as the first, then the second
loop would iterate over the remaining values, checking if it forms a better solution and swapping it in if so.